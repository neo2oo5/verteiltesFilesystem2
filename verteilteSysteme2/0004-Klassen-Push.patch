From 88cde9acbaf835ff57ff8f825af3f0650d90379e Mon Sep 17 00:00:00 2001
From: Teimoon <timo.zimmer1@gmx.de>
Date: Wed, 10 Dec 2014 11:36:30 +0100
Subject: [PATCH 4/5] Klassen-Push

---
 verteilteSysteme2/src/com/vs2/user/Benutzer.java   | 150 +++++++++++++++
 .../src/com/vs2/user/BenutzerException.java        |  19 ++
 .../src/com/vs2/user/BenutzerListe.java            | 202 +++++++++++++++++++++
 verteilteSysteme2/src/com/vs2/user/IPAdressen.java |  66 +++++++
 4 files changed, 437 insertions(+)
 create mode 100644 verteilteSysteme2/src/com/vs2/user/Benutzer.java
 create mode 100644 verteilteSysteme2/src/com/vs2/user/BenutzerException.java
 create mode 100644 verteilteSysteme2/src/com/vs2/user/BenutzerListe.java
 create mode 100644 verteilteSysteme2/src/com/vs2/user/IPAdressen.java

diff --git a/verteilteSysteme2/src/com/vs2/user/Benutzer.java b/verteilteSysteme2/src/com/vs2/user/Benutzer.java
new file mode 100644
index 0000000..89389d0
--- /dev/null
+++ b/verteilteSysteme2/src/com/vs2/user/Benutzer.java
@@ -0,0 +1,150 @@
+package com.vs2.user;
+
+/*
+VS2-Projekt
+@Author: Alexander Mohr, Timo Zimmer
+@Author: Andreas Paul, Lukas Becker
+*/
+
+public class Benutzer 
+{
+    private String eigeneLANIP;
+    private String eigenePUBLICIP;
+    private String eigenerBenutzerName;
+    private int gruppenID;
+    private boolean istAdmin;
+    
+    private static final String DEFAULTHOSTNAME = "localhost";
+    private static final String DEFAULTLANIP = "127.0.0.1";
+    private static final String DEFAULTPUBLICIP = "0.0.0.0";
+    private static final int DEFAULTGRUPPENID = 1;
+    
+    private String fehlermeldung;
+    
+    //Fehlermeldungskonstanten
+    private static final String ERROR_NOUSERNAME = "Es wurde kein Benutzername uebergeben\n";
+    private static final String ERROR_NOIP = "Es wurde keine LAN-IP uebergebenn\n";
+    private static final String ERROR_GRUPPENID = "Wertebereich der Gruppen-ID muss zwischen 1 und 10 liegen!\n";
+	
+    
+    //-----------------------Konstruktoren----------------------------------
+    
+    /*
+    Default-Konstruktor
+    */
+    public Benutzer() throws BenutzerException {
+            this(DEFAULTHOSTNAME, DEFAULTLANIP, DEFAULTPUBLICIP, DEFAULTGRUPPENID , false);
+    }
+    
+    /*
+    Voll-Konstruktor
+    
+    @param eigenerBenutzerName  Name des Benutzers
+    @param eigeneLANIP          LAN-IP-Adresse des Benutzers
+    @param gruppenID            Zugehoerige Gruppen-ID
+    @param istAdmin             Erweiterte Rechte auf Anzeigetafeln
+    */
+    public Benutzer(String eigenerBenutzerName, String eigeneLANIP, String eigenePUBLICIP, int gruppenID, boolean istAdmin) throws BenutzerException
+    {
+        if (eigenerBenutzerName.trim().isEmpty() || eigenerBenutzerName == null) {
+                fehlermeldung += ERROR_NOUSERNAME;
+        }
+        
+        if (eigeneLANIP.trim().isEmpty() || eigeneLANIP == null) {
+                fehlermeldung += ERROR_NOIP;
+        }
+        
+        /* Extra keine Abfangmethode für eigenePUBLICIP erstellt, da Anwendung
+        auch ohne Internetanschluss im LAN ohne Fehler funktionieren soll. */
+           
+        if( ( gruppenID <= 0 ) || ( gruppenID > 10 ) )
+        {
+            fehlermeldung += ERROR_GRUPPENID;
+        }
+
+        if(fehlermeldung.length() != 0) {
+            throw new BenutzerException(fehlermeldung);
+        }         
+            this.eigenerBenutzerName = eigenerBenutzerName;
+            this.eigeneLANIP = eigeneLANIP;
+            this.gruppenID = gruppenID;
+            this.istAdmin = istAdmin;
+        
+    }
+    
+    //---------------------(David) getter und setter-Methoden----------------
+    
+    /*
+    Rückgabe der eigenen IP-Adresse
+    @return eigeneLANIP
+    */
+    public String getEigeneLANIP()
+    {
+        return this.eigeneLANIP;        
+    }
+        
+    /*
+    Rückgabe des eigenen Benutzernamen
+    @return eigenerBenutzername
+    */
+    public String getEigenerBenutzerName()
+    {
+        return this.eigenerBenutzerName;        
+    }
+    
+    /*
+    Setzen des eignen Benutzernames 
+    @param eigenerBenutzerName  Name des Benutzers
+    */   
+    public void setEigenerBenutzerName(String eigenerBenutzerName) throws BenutzerException
+    {
+        if (eigenerBenutzerName.trim().isEmpty())
+        {
+              throw new BenutzerException(ERROR_NOUSERNAME);
+        }
+        this.eigenerBenutzerName = eigenerBenutzerName;
+    }
+    
+    /*
+    Setzen der mir zugehörigen Gruppen-ID
+    @param GruppenID    Zugehoerige Gruppen-ID
+    */   
+    public void setGruppenID(int gruppenID) throws BenutzerException
+    {
+        
+        if( ( gruppenID <= 0 ) || ( gruppenID > 10 ) )
+        {
+           throw new BenutzerException(ERROR_GRUPPENID);
+        }
+        
+        this.gruppenID = gruppenID;
+        
+    }
+    
+    /*
+    Rückgabe der eigenen Gruppen-ID
+    @return gruppenID
+    */
+    public int getGruppenID()
+    {
+        return this.gruppenID;
+    }
+    
+    /*
+    Setzen des Admin-Rechtes
+    @param istAdmin Schlater des Rechtes
+    */ 
+    public void setAdmin(boolean istAdmin)
+    {
+        this.istAdmin = istAdmin;
+    }
+    
+    /*
+    Rückgabe ob Benutzer Admin-Rechte hat
+    @return istAdmin
+    */
+    public boolean getAdmin()
+    {
+        return istAdmin;
+    }
+}
diff --git a/verteilteSysteme2/src/com/vs2/user/BenutzerException.java b/verteilteSysteme2/src/com/vs2/user/BenutzerException.java
new file mode 100644
index 0000000..0ecc59e
--- /dev/null
+++ b/verteilteSysteme2/src/com/vs2/user/BenutzerException.java
@@ -0,0 +1,19 @@
+package com.vs2.user;
+
+/*
+VS2-Projekt
+@Author: Alexander Mohr, Timo Zimmer
+@Author: Andreas Paul, Lukas Becker
+*/
+
+public class BenutzerException extends Exception{
+    
+    public BenutzerException(){
+        super();
+    }
+    
+    public BenutzerException(String meldung){
+        super("Fehler Benutzerverwaltung:\n" + meldung);
+    }
+    
+}
\ No newline at end of file
diff --git a/verteilteSysteme2/src/com/vs2/user/BenutzerListe.java b/verteilteSysteme2/src/com/vs2/user/BenutzerListe.java
new file mode 100644
index 0000000..63a4e92
--- /dev/null
+++ b/verteilteSysteme2/src/com/vs2/user/BenutzerListe.java
@@ -0,0 +1,202 @@
+package com.vs2.user;
+
+/**
+ * VS2-Projekt
+ * @author Alexander Mohr, Timo Zimmer, Lukas Becker, Andreas Paul
+ */
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class BenutzerListe {
+    
+    private List<Benutzer> benutzerListe;
+    
+    /*
+        Konstruktor
+        Initialisiert die Benutzerliste.
+    */
+    public BenutzerListe()
+    {
+        benutzerListe = new ArrayList<>();       
+    }
+    
+    //-------------- Benutzer in Liste einfuegen bzw. loeschen ---------------
+    
+    /*
+      Fuegt einen Benutzer, falls nicht schon in der Liste vorhanden, 
+      in die Liste ein.
+    
+      @param bn     Benutzer, der eingefuegt werden soll.
+    */
+    public void addBenutzer(Benutzer bn)
+    {
+        if(!containsUser(bn))
+        {
+            benutzerListe.add(bn);
+        }
+    }
+    
+    /*
+      Fuegt einen Benutzer, falls nicht schon in der Liste vorhanden, 
+      an eine bestimmte Stelle in die Liste ein.
+    
+      @param stelle     Index, an die der Benutzer eingefuegt werden soll.
+      @param bn         Benutzer, der eingefuegt werden soll.
+    */
+    public void addBenutzerByIndex(int stelle, Benutzer bn)
+    {
+        if(!containsUser(bn))
+        {
+            benutzerListe.add(stelle, bn);
+        }
+    }
+    
+    /*
+      Loescht einen Benutzer an einer bestimmten Stelle.
+    
+      @param stelle     Stelle, an der der Benutzer geloescht werden soll.
+    */
+    public void deleteBenutzerByIndex(int stelle)
+    {
+        benutzerListe.remove(stelle);
+    }
+    
+    /*
+      Loescht einen Benutzer.
+    
+      @param bn     Benutzer, der geloescht werden soll.
+    */
+    public void deleteBenutzer(Benutzer bn)
+    {
+        int del = searchUser(bn);
+        
+        if(del > -1)
+        {
+            benutzerListe.remove(del);
+        }
+    }
+    
+    /*
+      Gesamte Liste wird geloescht.
+    */
+    public void clearList(){
+        
+        benutzerListe.clear();
+    }
+    
+    //---------------- Methoden zum finden eines Benutzers ---------------
+    
+    /*
+      Prueft ob ein Benutzer bereits in der Liste vorhanden ist.
+    
+      @param bn     Benutzer, der gesucht wird.
+      @return       true oder false
+    */
+    public boolean containsUser(Benutzer bn)
+    {
+        if (searchUser(bn) < 0) {
+                return false;
+        } else {
+                return true;
+        }
+    }
+    
+    /*
+      Sucht einen Benutzer in der Liste.
+    
+      @param bn     Der zu suchende Benutzer.
+      @return       Index, an dem der Benutzer gefunden wurde, ansonsten -1.
+    */
+    private int searchUser(Benutzer bn)
+    {
+        for(int i = 0; i < benutzerListe.size(); i++)
+        {
+            if(bn.equals(benutzerListe.get(i))){
+                return i;
+            }
+        }
+        
+        return -1;
+    }
+    
+    /*
+      Prueft anhand des Namens, ob ein Benutzer bereits in der Liste vorhanden ist.
+    
+      @param benutzerName   Name des Benutzers.
+      @return               true oder false
+    */
+    public boolean containsUserName(String benutzerName) 
+    {
+        if (searchByName(benutzerName) < 0) {
+                return false;
+        } else {
+                return true;
+        }
+    }
+    
+    /*
+      Sucht einen Benutzer, anhand seines Names.
+    
+      @param benutzerName   Name des Benutzers.
+      @return               Index, an dem der Benutzer gefunden wurde, ansonsten -1.
+    */
+    private int searchByName(String benutzerName)
+    {
+        
+        for (int i = 0; i < benutzerListe.size(); i++) {
+            
+            if (
+                benutzerListe.get(i).getEigenerBenutzerName().
+                        equals(benutzerName)) 
+            {
+                    return i;
+            }
+        }
+        
+        return -1;  
+    }
+    
+    /*
+      Prueft anhand der IP, ob ein Benutzer bereits in der Liste vorhanden ist.
+    
+      @param ip   IP-Adresse des Benutzers.
+      @return     true oder false
+    */
+    public boolean containsUserIP(String ip) 
+    {
+        if (searchByIp(ip) < 0) {
+                return false;
+        } else {
+                return true;
+        }
+    }
+    
+    /*
+      Sucht einen Benutzer, anhand seiner IP-Adresse.
+    
+      @param ip   IP-Adresse des Benutzers.
+      @return     Index, an dem der Benutzer gefunden wurde, ansonsten -1.
+    */
+    private int searchByIp(String ip) 
+    {
+ 
+        for (int i = 0; i < benutzerListe.size(); i++) {
+            
+            if (benutzerListe.get(i).getEigeneLANIP().equals(ip)) {
+                    return i;
+            }
+        }
+        
+        return -1;
+    }
+    
+    /*
+        @return Anzahl der Benutzer in der Liste.
+    */
+    public int getSize()
+    {
+        return benutzerListe.size();
+    }
+
+}
diff --git a/verteilteSysteme2/src/com/vs2/user/IPAdressen.java b/verteilteSysteme2/src/com/vs2/user/IPAdressen.java
new file mode 100644
index 0000000..a5f459a
--- /dev/null
+++ b/verteilteSysteme2/src/com/vs2/user/IPAdressen.java
@@ -0,0 +1,66 @@
+package com.vs2.user;
+
+import java.io.BufferedInputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.net.MalformedURLException;
+import java.net.URL;
+
+public class IPAdressen {
+    InputStream in;
+    String htmlResponse;
+    String publicIP;
+    
+    
+    public String getPublicIP() throws IOException
+    {
+        in = urlOpen();
+        htmlResponse = copyStream(in);
+        publicIP = filterIPAdresse(htmlResponse);
+        return publicIP;
+    }
+    
+    private InputStream urlOpen() throws IOException 
+    {
+        URL url = new URL("http://checkip.dyndns.org/");
+        in = url.openStream();
+        return in;
+    }
+    
+   
+    private String copyStream(InputStream in) throws IOException 
+    {
+        String inhalt= "";
+        BufferedInputStream bin = new BufferedInputStream(in);
+       
+        int c = bin.read();
+        while (c != -1) 
+        {
+            inhalt = inhalt + (char) c;
+            c = bin.read();
+        }
+        return inhalt;
+    }
+    
+     private String filterIPAdresse(String htmlResponse)
+     {
+         String ip;               
+            System.out.println("Ausgabe 1: "+htmlResponse);
+            
+            String[] Teile = htmlResponse.split(":");
+            String teil1 = Teile[0]; 
+            String teil2 = Teile[1]; 
+            System.out.println("Teilausgabe 1: "+teil1);
+            System.out.println("Teilausgabe 2: "+teil2);
+            
+            String[] TeileIP = teil2.split("<");
+            ip = TeileIP[0].trim();
+            return ip;
+     }
+   
+    public static void main (String[] args) throws MalformedURLException, IOException 
+    { 
+        IPAdressen test = new IPAdressen();
+        System.out.println("DIe oeffentliche IP lautet: "+test.getPublicIP());
+    }
+}
-- 
1.9.1

